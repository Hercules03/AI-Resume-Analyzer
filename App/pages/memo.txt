"""
if pdf_file is not None:
    # Validate file
    if validate_file_upload(pdf_file):
        
        with st.spinner('Processing resume with AI-powered extractors...'):
            time.sleep(2)
            
        ### Save the uploaded resume
        save_image_path = './Uploaded_Resumes/' + pdf_file.name
        pdf_name = pdf_file.name

        with open(save_image_path, "wb") as f:
            f.write(pdf_file.getbuffer())

        # Display PDF
        pdf_display_html = show_pdf(save_image_path)
        st.markdown(pdf_display_html, unsafe_allow_html=True)

        if llm_service.is_available():
            try:
                # Enhanced PDF text extraction with intelligent fallback
                extracted_text, extraction_method = _extract_text_with_intelligent_fallback(save_image_path)
                
                # Check if extraction was successful
                if not extracted_text.startswith("Error:"):
                    # Process resume with extracted text
                    with st.spinner('Processing resume with AI-powered extractors...'):
                        resume = resume_processor.process_resume_from_text(extracted_text, save_image_path, False)

                    if resume and resume.name != "Unknown":
                        # Display result in a structured way
                        display_resume_results(resume, False)

                        # Prepare data for database
                        user_data = prepare_user_data_from_resume(
                            resume, system_info, location_info, sec_token, pdf_name
                        )

                        # Insert into ChromaDB vector database
                        insertion_success = db_manager.insert_user_data(user_data)

                        # Show success message
                        if insertion_success:
                            st.success("✅ **Resume analysis completed successfully**")
                        else:
                            st.warning("⚠️ Resume analysis completed but database insertion failed")

                    else:
                        st.warning("⚠️ **Resume processing completed with limited data extraction**")
                        st.info("This may be due to document quality or format. Consider providing a clearer PDF.")
                        
                else:
                    st.error("❌ **Text extraction failed** - Unable to process resume")
                    st.error("Please ensure the PDF is not corrupted and contains readable text.")
                    
            except Exception as e:
                st.error(f"❌ **Resume processing failed**: {str(e)}")
                st.info("Please try with a different PDF or contact support if the issue persists.")
        
        else:
            st.error("❌ **LLM service not available.** Please check your Ollama configuration.")
"""